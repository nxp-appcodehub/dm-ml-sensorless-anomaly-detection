/*
 * Copyright 2024 NXP
 *
 * License: NXP LA_OPT_Online Code Hosting NXP_Software_License
 *
 * NXP Proprietary. This software is owned or controlled by NXP and may
 * only be used strictly in accordance with the applicable license terms.
 * By expressly accepting such terms or by downloading, installing,
 * activating and/or otherwise using the software, you are agreeing that
 * you have read, and that you agree to comply with and are bound by,
 * such license terms.  If you do not agree to be bound by the applicable
 * license terms, then you may not retain, install, activate or otherwise
 * use the software.
 *
 * Time Series Studio model - master header file
 */

/*
 * Note:
 * THIS FILE IS AUTO-GENERATED BY TIME SERIES STUDIO. DO NOT MODIFY!
 */

#ifndef _TIMESERIES_H_
#define _TIMESERIES_H_

#define ANOMALY_DETECTION_LIB_ID "02f34ca42ff519"

#define TSS_INPUT_DATA_LEN                           (1)
#define TSS_INPUT_DATA_DIM                           (2)

#define USE_ANOMALY_DETECTION

#define TSS_RECOMMEND_THRESHOLD                      (0.90f)

#define SUPPORT_ODL          /* Support On Device Learning */

#define MODEL_SIZE                                   (11)

#define TSS_RECOMMEND_LEARNING_SAMPLE_NUM            (11200)

/* Error status returned functions in the Time Series Studio library */
typedef enum
{
    TSS_SUCCESS             = 0, /* No error */
    TSS_STATE_ERROR         = 1, /* State is incorrect */
    TSS_BOARD_ERROR         = 2, /* Board information is incorrect */
    TSS_MEMORY_ERROR        = 3, /* Memory error caused by the HEAP Overflow */
    TSS_PREDICT_NOT_ENABLED = 4, /* Predict function is not enabled */
    TSS_LEARNING_ERROR      = 5, /* Errors occurs during the learning process */
    TSS_LEARNING_NOT_ENOUGH = 6, /* Samples are not enough for learning */
    TSS_NOT_READY           = 7, /* Function is not ready but planed to support */
    TSS_LICENSE_ERROR       = 8, /* Invalid license */
    TSS_UNKNOWN_ERROR       = 9, /* Unknown error */
} tss_status;

#ifdef __cplusplus
extern "C" {
#endif

static const float model_buffer[MODEL_SIZE] = {
    11200.00000000f, -0.51588637f, -322.75942993f, 781.26373291f, 550289.25000000f, 550289.25000000f, 395037344.00000000f, 1.05783367f,
    759.40118408f, -0.00144522f, -1.05785024f,
};

/**
 * @brief      Initialize the anomaly detection algorithm with the specified model.
 * @param[in]  model_buffer             - The model buffer for initialization, NULL means reset the model.
 * @retval     TSS_SUCCESS              - Initialization succeed.
 */
tss_status tss_ad_init(const float model_buffer[]);

/**
 * @brief      Learn new model from the normal data.
 * @param[in]  data_input               - The data input for the learning.
 * @retval     TSS_SUCCESS              - Learning succeed
 * @retval     TSS_LEARNING_NOT_ENOUGH  - More data needed for the learning.
 */
tss_status tss_ad_learn(const float data_input[]);

/**
 * @brief      Export the model to the specified buffer.
 * @param[out] model_buffer             - The exported model buffer.
 * @retval     TSS_SUCCESS              - Export succeed.
 * @retval     TSS_PREDICT_NOT_ENABLED  - Model not ready for export.
 */
tss_status tss_ad_export(float model_buffer[]);

/**
 * @brief      Predict the normal probability of the specified data.
 * @param[in]  data_input               - The data input for the prediction.
 * @param[out] probability              - The predicted probability output.
 * @retval     TSS_SUCCESS              - Prediction succeed.
 * @retval     TSS_PREDICT_NOT_ENABLED  - Model not ready for prediction.
 */
tss_status tss_ad_predict(const float data_input[], float *probability);

#ifdef __cplusplus
}
#endif

#endif /* _TIMESERIES_H_ */